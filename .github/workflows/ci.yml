name: Evals

on:
  pull_request:
    types:
      - opened
      - synchronize
      - labeled

env:
  EVAL_MODELS: "gpt-4o,gpt-4o-mini,claude-3-5-sonnet-latest"
  EVAL_CATEGORIES: "observe,act,combination,extract,text_extract"

jobs:
  ####################################################################
  # 1. DETERMINE-EVALS
  #
  #    Checks if the PR is on main or has certain labels, then sets
  #    outputs to instruct which specialized evals should run.
  ####################################################################
  determine-evals:
    runs-on: ubuntu-latest
    outputs:
      run-extract: ${{ steps.check-labels.outputs.run-extract }}
      run-act: ${{ steps.check-labels.outputs.run-act }}
      run-observe: ${{ steps.check-labels.outputs.run-observe }}
      run-text-extract: ${{ steps.check-labels.outputs.run-text-extract }}
    steps:
      - id: check-labels
        run: |
          # Default: run all specialized tests on main
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "run-extract=true" >> $GITHUB_OUTPUT
            echo "run-act=true" >> $GITHUB_OUTPUT
            echo "run-observe=true" >> $GITHUB_OUTPUT
            echo "run-text-extract=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Otherwise check specific labels
          echo "run-extract=${{ contains(github.event.pull_request.labels.*.name, 'extract') }}" >> $GITHUB_OUTPUT
          echo "run-act=${{ contains(github.event.pull_request.labels.*.name, 'act') }}" >> $GITHUB_OUTPUT
          echo "run-observe=${{ contains(github.event.pull_request.labels.*.name, 'observe') }}" >> $GITHUB_OUTPUT
          echo "run-text-extract=${{ contains(github.event.pull_request.labels.*.name, 'text-extract') }}" >> $GITHUB_OUTPUT

  ####################################################################
  # 2. Some Pre-Eval Jobs (examples)
  ####################################################################
  run-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install --no-frozen-lockfile

      - name: Run Lint
        run: npm run lint

  run-build:
    runs-on: ubuntu-latest
    needs: [run-lint]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install --no-frozen-lockfile

      - name: Run Build
        run: npm run build

  run-e2e-tests:
    needs: [run-lint, run-build]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm install --no-frozen-lockfile
      - name: Build Stagehand
        run: npm run build
      - name: Run E2E Tests
        run: npm run e2e

  run-combination-evals:
    needs: [run-e2e-tests, determine-evals]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm install --no-frozen-lockfile
      - name: Build Stagehand
        run: npm run build
      - name: Combination Evals (Dummy)
        run: |
          echo "Pretending to run combination eval..."
          cat <<EOF > combo-summary.json
          {
            "experimentName": "dummyCombination",
            "categories": {
              "combination": 90
            }
          }
          EOF
      - name: Log Combination
        run: |
          if [ ! -f combo-summary.json ]; then
            echo "No combination file found, failing"
            exit 1
          fi
          combo_score=$(jq '.categories.combination' combo-summary.json)
          echo "Combination category score: $combo_score%"

  ####################################################################
  # 3. SPECIALIZED EVAL JOBS, SEQUENTIAL
  #
  #    Each job depends on the previous, so they run strictly in order:
  #      run-extract-evals -> run-text-extract-evals -> run-act-evals -> run-observe-evals
  #    If the label isn't set, the job does a no-op and exits 0 = success
  #    so the next job won't be skipped.
  ####################################################################

  # ----------------- EXTRACT EVALS -----------------
  run-extract-evals:
    needs: [determine-evals, run-combination-evals]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install --no-frozen-lockfile

      - name: Build Stagehand
        run: npm run build

      - name: Maybe Run Extract Evals
        run: |
          if [ "${{ needs.determine-evals.outputs.run-extract }}" != "true" ]; then
            echo "Label 'extract' not set. Skipping extract steps."
            exit 0
          fi
          echo "Pretending to run EXTRACT EVALS..."
          cat <<EOF > eval-summary-extract.json
          {
            "experimentName": "dummyExtractEval",
            "categories": {
              "extract": 85
            }
          }
          EOF

      - name: Check Extract Score
        run: |
          # If we didn't run the above step, no file
          if [ ! -f eval-summary-extract.json ]; then
            echo "No extract file found. Possibly skipped. Exiting success."
            exit 0
          fi
          extract_score=$(jq '.categories.extract' eval-summary-extract.json)
          echo "Extract category score: $extract_score%"
          if (( $(echo "$extract_score < 80" | bc -l) )); then
            echo "Extract <80%. Failing CI."
            exit 1
          fi

  # ----------------- TEXT-EXTRACT EVALS -----------------
  run-text-extract-evals:
    needs: [run-extract-evals] # ensures it runs after run-extract-evals
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install --no-frozen-lockfile

      - name: Build Stagehand
        run: npm run build

      - name: Maybe Run text_extract Evals
        run: |
          if [ "${{ needs.determine-evals.outputs.run-text-extract }}" != "true" ]; then
            echo "Label 'text-extract' not set. Skipping text_extract steps."
            exit 0
          fi
          echo "Pretending to run TEXT_EXTRACT EVALS..."
          cat <<EOF > eval-summary-textExtract.json
          {
            "experimentName": "dummyTextExtractEval",
            "categories": {
              "text_extract": 78
            }
          }
          EOF

      - name: Check text_extract Score
        run: |
          if [ ! -f eval-summary-textExtract.json ]; then
            echo "No text_extract file found. Possibly skipped. Exiting success."
            exit 0
          fi
          text_extract_score=$(jq '.categories.text_extract' eval-summary-textExtract.json)
          echo "text_extract score: $text_extract_score%"
          if (( $(echo "$text_extract_score < 80" | bc -l) )); then
            echo "text_extract <80%. Failing CI."
            exit 1
          fi

  # ----------------- ACT EVALS -----------------
  run-act-evals:
    needs: [run-text-extract-evals] # ensures it runs after text-extract-evals
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install --no-frozen-lockfile

      - name: Build Stagehand
        run: npm run build

      - name: Maybe Run Act Evals
        run: |
          if [ "${{ needs.determine-evals.outputs.run-act }}" != "true" ]; then
            echo "Label 'act' not set. Skipping act steps."
            exit 0
          fi
          echo "Pretending to run ACT EVALS..."
          cat <<EOF > eval-summary-act.json
          {
            "experimentName": "dummyActEval",
            "categories": {
              "act": 82
            }
          }
          EOF

      - name: Check Act Score
        run: |
          if [ ! -f eval-summary-act.json ]; then
            echo "No act file found. Possibly skipped. Exiting success."
            exit 0
          fi
          act_score=$(jq '.categories.act' eval-summary-act.json)
          echo "Act category score: $act_score%"
          if (( $(echo "$act_score < 80" | bc -l) )); then
            echo "Act <80%. Failing CI."
            exit 1
          fi

  # ----------------- OBSERVE EVALS -----------------
  run-observe-evals:
    needs: [run-act-evals] # ensures it runs after act-evals
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install --no-frozen-lockfile

      - name: Build Stagehand
        run: npm run build

      - name: Maybe Run Observe Evals
        run: |
          if [ "${{ needs.determine-evals.outputs.run-observe }}" != "true" ]; then
            echo "Label 'observe' not set. Skipping observe steps."
            exit 0
          fi
          echo "Pretending to run OBSERVE EVALS..."
          cat <<EOF > eval-summary-observe.json
          {
            "experimentName": "dummyObserveEval",
            "categories": {
              "observe": 88
            }
          }
          EOF

      - name: Check Observe Score
        run: |
          if [ ! -f eval-summary-observe.json ]; then
            echo "No observe file found. Possibly skipped. Exiting success."
            exit 0
          fi
          observe_score=$(jq '.categories.observe' eval-summary-observe.json)
          echo "Observe category score: $observe_score%"
          if (( $(echo "$observe_score < 80" | bc -l) )); then
            echo "Observe <80%. Failing CI."
            exit 1
          fi
