name: Evals

on:
  pull_request:
    types:
      - opened
      - synchronize
      - labeled

jobs:
  ##########################################################################
  # 1. DETERMINE-EVALS
  #
  #    Checks if this is the main branch or specific labels, then outputs
  #    a JSON array of categories to run, e.g. ["extract","act","observe"].
  ##########################################################################
  determine-evals:
    runs-on: ubuntu-latest
    outputs:
      dynamic_matrix: ${{ steps.set-matrix.outputs.eval_matrix }}
    steps:
      - id: check-labels
        run: |
          # Default to running all specialized tests if on main
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "::set-output name=run-extract::true"
            echo "::set-output name=run-act::true"
            echo "::set-output name=run-observe::true"
            echo "::set-output name=run-text-extract::true"
            exit 0
          fi

          # Otherwise, check labels for each category
          echo "::set-output name=run-extract::$(echo ${{ contains(github.event.pull_request.labels.*.name, 'extract') }})"
          echo "::set-output name=run-act::$(echo ${{ contains(github.event.pull_request.labels.*.name, 'act') }})"
          echo "::set-output name=run-observe::$(echo ${{ contains(github.event.pull_request.labels.*.name, 'observe') }})"
          echo "::set-output name=run-text-extract::$(echo ${{ contains(github.event.pull_request.labels.*.name, 'text-extract') }})"

      - id: set-matrix
        run: |
          # We'll gather categories into a JSON array
          cats=()

          if [ "${{ steps.check-labels.outputs.run-extract }}" == "true" ]; then
            cats+=("extract")
          fi
          if [ "${{ steps.check-labels.outputs.run-text-extract }}" == "true" ]; then
            cats+=("text_extract")
          fi
          if [ "${{ steps.check-labels.outputs.run-act }}" == "true" ]; then
            cats+=("act")
          fi
          if [ "${{ steps.check-labels.outputs.run-observe }}" == "true" ]; then
            cats+=("observe")
          fi

          # Convert Bash array to JSON array: ["extract","act",...]
          # If no categories, it becomes an empty array "[]"
          JSON_ARRAY="$(printf '%s\n' "${cats[@]}" | jq -R . | jq -s .)"

          echo "Eval categories: $JSON_ARRAY"

          # Pass JSON_ARRAY back as an output of this step
          echo "::set-output name=eval_matrix::$JSON_ARRAY"

  ##########################################################################
  # 2. EXAMPLE: COMBINATION EVALS
  ##########################################################################
  run-combination-evals:
    runs-on: ubuntu-latest
    needs: [determine-evals]
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Pretend to run combo eval
        run: |
          echo "Pretending to run combination eval..."
          cat <<EOF > combo-summary.json
          {
            "experimentName": "dummyCombination",
            "categories": {
              "combination": 90
            }
          }
          EOF
      - name: Log combo
        run: |
          combo_score=$(jq '.categories.combination' combo-summary.json)
          echo "Combination category score: $combo_score%"

  ##########################################################################
  # 3. SPECIALIZED EVALS - DYNAMIC MATRIX
  #
  #    This single job expands into multiple runsâ€”one per category in
  #    the dynamic_matrix. If the matrix array is empty, the job doesn't
  #    run any child tasks, so it won't show "skipped" items.
  #
  #    We set max-parallel: 1 to ensure the runs happen sequentially.
  ##########################################################################
  run-specialized-evals:
    needs: [determine-evals, run-combination-evals]
    runs-on: ubuntu-latest

    # Expand each item in the JSON array as matrix.category
    strategy:
      matrix:
        category: ${{ fromJson(needs.determine-evals.outputs.dynamic_matrix) }}
      max-parallel: 1 # force sequential runs

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install --no-frozen-lockfile

      - name: Build Stagehand
        run: npm run build

      - name: Specialized Evals
        run: |
          case "${{ matrix.category }}" in
            "extract")
              echo "Running EXTRACT Evals..."
              cat <<EOF > eval-summary-extract.json
              {
                "experimentName": "dummyExtractEval",
                "categories": {
                  "extract": 85
                }
              }
              EOF
              extract_score=$(jq '.categories.extract' eval-summary-extract.json)
              echo "Extract Score: $extract_score%"
              if (( $(echo "$extract_score < 80" | bc -l) )); then
                echo "Extract <80%. Failing."
                exit 1
              fi
              ;;
            "text_extract")
              echo "Running TEXT_EXTRACT Evals..."
              cat <<EOF > eval-summary-text_extract.json
              {
                "experimentName": "dummyTextExtractEval",
                "categories": {
                  "text_extract": 78
                }
              }
              EOF
              txt_score=$(jq '.categories.text_extract' eval-summary-text_extract.json)
              echo "TextExtract Score: $txt_score%"
              if (( $(echo "$txt_score < 80" | bc -l) )); then
                echo "text_extract <80%. Failing."
                exit 1
              fi
              ;;
            "act")
              echo "Running ACT Evals..."
              cat <<EOF > eval-summary-act.json
              {
                "experimentName": "dummyActEval",
                "categories": {
                  "act": 82
                }
              }
              EOF
              act_score=$(jq '.categories.act' eval-summary-act.json)
              echo "Act Score: $act_score%"
              if (( $(echo "$act_score < 80" | bc -l) )); then
                echo "Act <80%. Failing."
                exit 1
              fi
              ;;
            "observe")
              echo "Running OBSERVE Evals..."
              cat <<EOF > eval-summary-observe.json
              {
                "experimentName": "dummyObserveEval",
                "categories": {
                  "observe": 88
                }
              }
              EOF
              observe_score=$(jq '.categories.observe' eval-summary-observe.json)
              echo "Observe Score: $observe_score%"
              if (( $(echo "$observe_score < 80" | bc -l) )); then
                echo "Observe <80%. Failing."
                exit 1
              fi
              ;;
            *)
              echo "Unknown category: ${{ matrix.category }}"
              exit 1
          esac
